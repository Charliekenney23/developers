# vim: set et ts=2 sw=2 tw=80 :
name: Networking
sort: 1
description: >
  Networking endpoints provide a means of viewing networking objects.
endpoints:
  /networking/ips:
    group: IPs
    authenticated: true
    description: >
      View and manage IP Addresses you own.
    methods:
      GET:
        response: ipaddress
        paginationKey: data
        oauth: ips:view
        description: >
          Returns a list of IP Addresses, including v4, slaac, and public v6
          addresses.
        examples:
          curl: |
            curl -H "Authorization: Bearer $TOKEN" \
              https://$api_root/$version/networking/ips
      POST:
        response: ipaddress
        money: true
        oauth: ips:create
        description: >
          Create a new IPv4 Address.
        params:
          type:
            type: String
            description: >
              The type of IP to allocate. Currently only "ipv4" is supported.
            value: ipv4
          public:
            type: Boolean
            description: >
              Whether this is a public or private IP address.
              Public IP Addresses, over and above the one included with each
              Linode, incur an additional monthly charge. If you need an
              additional Public IP Address you must request one - please
              open a ticket.
            value: true
          linode_id:
            type: Integer
            description: >
              The Linode ID to assign this IP to.
            value: 123
        examples:
          curl: |
            curl -H "Content-Type: application/json" \
                -H "Authorization: Bearer $TOKEN" \
                -X POST -d '{"type":"ipv4", "public":true, "linode":123}' \
                https://$api_root/$version/networking/ips
  /networking/ips/$address:
    group: IPs
    type: resource
    authenticated: true
    description: >
      Manage a single IP Address.
    methods:
      GET:
        response: ipaddress
        oauth: ips:get
        description: >
            Returns a single IP Address.
        examples:
            curl: |
              curl -H "Authorization: Bearer $TOKEN" \
                https://$api_root/$version/networking/ips/97.107.143.37
            python: |
              my_ipv4 = linode.IPAddress(client, '97.107.143.37')
      PUT:
        oauth: ips:modify
        description: >
            Update RDNS on one IP Address.  Set RDNS to null to reset.
        examples:
          curl: |
            curl -H "Content-Type: application/json" \
                -H "Authorization: Bearer $TOKEN" \
                -X PUT -d '{"rdns":"example.org"}' \
                https://$api_root/$version/networking/ips/97.107.143.37
          python: |
            my_ipv4.rdns = 'example.org'
            my_ipv4.save()
      DELETE:
        oauth: ips:modify
        description: >
          Delete a public IPv4 address
        examples:
          curl: |
            curl -H "Authorization: Bearer $TOKEN" \
                -X DELETE \
                https://$api_root/$version/networking/ips/97.107.143.37
  /networking/ipv6/pools:
    group: IPv6
    authenticated: true
    description: >
      Manage IPv6 Global Pools.
    methods:
      GET:
        response: ipv6pool
        paginationKey: ipv6s
        oauth: ips:view
        description: >
          Returns a list of IPv6 Pools.
        examples:
          curl: |
            curl -H "Authorization: Bearer $TOKEN" \
                https://$api_root/$version/networking/ipv6/pools
          python: |
            my_ipv6s = client.networking.get_ipv6_pools()
  /networking/ipv6/ranges:
    group: IPv6
    authenticated: true
    description: >
      Manage IPv6 Ranges.
    methods:
      GET:
        response: ipv6pool
        paginationKey: ipv6s
        oauth: ips:view
        description: >
          Returns a list of IPv6 Ranges.
        examples:
          curl: |
            curl -H "Authorization: Bearer $TOKEN" \
                https://$api_root/$version/networking/ipv6/ranges
          python: |
            my_ipv6s = client.networking.get_ipv6_ranges()
  /networking/ipv4/assign:
    group: IPv4
    type: Strange
    authenticated: true
    description: >
      Assigns an IPv4 address to a Linode.
    methods:
      POST:
        oauth: linodes:access
        dangerous: true
        params:
          region:
            description: >
              The region where the IPv4 address
              and Linode are located.
            type: string
            value: us-east-1a
          assignments:
            description: >
              An array of IPv4 addresses and the Linode IDs they will be assigned to
            isArray: true
            type:
              address:
                type: string
                value: 210.111.22.94
                description: IPv4 address to assign to a Linode.
              linode_id:
                type: integer
                value: 123405
                description: The ID of the Linode to assign this address to.
        examples:
          curl: |
            curl -H "Content-Type: application/json" \
                -H "Authorization: Bearer $TOKEN" \
                -X POST -d '$SUB_SPEC_EXAMPLE' \
            https://$api_root/$version/networking/ipv4/assign
          python: |
            linode_1 = linode.Linode(client, 134504)
            ip1 = linode_1.ips.ipv4.public[0]

            linode_2 = linode.Linode(client, 119034)
            ip2 = linode_2.ips.ipv4.public[0]

            client.networking.assign_ips(linode_1.region, ip1.to(linode_2), ip2.to(linode_1))
  /networking/ipv4/share:
    group: IPv4
    type: Strange
    authenticated: true
    description: >
      Set IP sharing for a Linode.
    methods:
      POST:
        description: >
            Sets IP Sharing for this Linode.
        params:
          linode_id:
            type: Integer
            description: >
              The ID of the Linode to set up IP sharing for.
          ips:
            type: Array
            subtype: string
            description: >
              A list of IP Addresses this Linode will share.
        examples:
          curl: |
            curl -H "Content-Type: application/json" \
                -H "Authorization: Bearer $TOKEN" \
                -X POST -d '{
                  "linode_id": 12345,
                  "ips": [ "97.107.143.29", "97.107.143.112" ]
                }' \
                https://$api_root/$version/networking/ipv4/share

